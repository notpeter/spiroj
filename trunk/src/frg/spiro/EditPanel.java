/*
 * EditPanel.java
 *
 * Created on 30 June 2005, 14:40
 */

package frg.spiro;

import java.awt.event.*;
import javax.swing.*;
import frg.gui.*;

/**
 * Editor for two operator roulettes.
 * @author  fgrebenicek
 */
public class EditPanel 
extends javax.swing.JPanel 
implements ActionListener {
  
  CssResourceMan rsc;
  App application;
  
  /** Creates new form EditPanel */
  public EditPanel(App parent) {
    this.application = parent;
    rsc = new CssResourceMan(getClass().getName());
    initComponents();
    complete();
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  private void initComponents() {//GEN-BEGIN:initComponents
    java.awt.GridBagConstraints gridBagConstraints;

    editors = new javax.swing.JTabbedPane();
    basicEditor = new javax.swing.JPanel();
    lbFixedRadius = new javax.swing.JLabel();
    spFixedRadius = new javax.swing.JSpinner();
    lbRollingRadius = new javax.swing.JLabel();
    spRollingRadius = new javax.swing.JSpinner();
    lbRatio = new javax.swing.JLabel();
    spRatio = new javax.swing.JSpinner();
    lbBasicFill = new javax.swing.JLabel();
    advancedEditor = new javax.swing.JPanel();
    fixedRadiusPanel = new javax.swing.JPanel();
    lbAdvancedFRx = new javax.swing.JLabel();
    spAdvancedFRx = new javax.swing.JSpinner();
    lbAdvancedFFx = new javax.swing.JLabel();
    spAdvancedFFx = new javax.swing.JSpinner();
    lbAdvancedFRy = new javax.swing.JLabel();
    spAdvancedFRy = new javax.swing.JSpinner();
    lbAdvancedFFy = new javax.swing.JLabel();
    spAdvancedFFy = new javax.swing.JSpinner();
    rollingRadiusPanel = new javax.swing.JPanel();
    lbAdvancedRRx = new javax.swing.JLabel();
    spAdvancedRRx = new javax.swing.JSpinner();
    lbAdvancedRFx = new javax.swing.JLabel();
    spAdvancedRFx = new javax.swing.JSpinner();
    lbAdvancedRRy = new javax.swing.JLabel();
    spAdvancedRRy = new javax.swing.JSpinner();
    lbAdvancedRFy = new javax.swing.JLabel();
    spAdvancedRFy = new javax.swing.JSpinner();
    lbAngleSteps = new javax.swing.JLabel();
    spAngleSteps = new javax.swing.JSpinner();
    controlPanel = new javax.swing.JPanel();
    btCalc = new javax.swing.JButton();
    btExport = new javax.swing.JButton();

    setLayout(new java.awt.BorderLayout());

    basicEditor.setLayout(new java.awt.GridBagLayout());

    lbFixedRadius.setText("FR");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
    basicEditor.add(lbFixedRadius, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 2);
    basicEditor.add(spFixedRadius, gridBagConstraints);

    lbRollingRadius.setText("RR");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
    basicEditor.add(lbRollingRadius, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 2);
    basicEditor.add(spRollingRadius, gridBagConstraints);

    lbRatio.setText("R");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
    basicEditor.add(lbRatio, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 2);
    basicEditor.add(spRatio, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    basicEditor.add(lbBasicFill, gridBagConstraints);

    editors.addTab("Basic", basicEditor);

    advancedEditor.setLayout(new java.awt.GridBagLayout());

    fixedRadiusPanel.setLayout(new java.awt.GridBagLayout());

    fixedRadiusPanel.setBorder(new javax.swing.border.TitledBorder("Fixed"));
    lbAdvancedFRx.setText("FR");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
    fixedRadiusPanel.add(lbAdvancedFRx, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 2);
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.weightx = 1.0;
    fixedRadiusPanel.add(spAdvancedFRx, gridBagConstraints);

    lbAdvancedFFx.setText("FF");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
    fixedRadiusPanel.add(lbAdvancedFFx, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 2);
    fixedRadiusPanel.add(spAdvancedFFx, gridBagConstraints);

    lbAdvancedFRy.setText("FR");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
    fixedRadiusPanel.add(lbAdvancedFRy, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 2);
    fixedRadiusPanel.add(spAdvancedFRy, gridBagConstraints);

    lbAdvancedFFy.setText("FF");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
    fixedRadiusPanel.add(lbAdvancedFFy, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 2);
    fixedRadiusPanel.add(spAdvancedFFy, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    advancedEditor.add(fixedRadiusPanel, gridBagConstraints);

    rollingRadiusPanel.setLayout(new java.awt.GridBagLayout());

    rollingRadiusPanel.setBorder(new javax.swing.border.TitledBorder("Fixed"));
    lbAdvancedRRx.setText("FR");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    rollingRadiusPanel.add(lbAdvancedRRx, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 2);
    rollingRadiusPanel.add(spAdvancedRRx, gridBagConstraints);

    lbAdvancedRFx.setText("FF");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
    rollingRadiusPanel.add(lbAdvancedRFx, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 2);
    rollingRadiusPanel.add(spAdvancedRFx, gridBagConstraints);

    lbAdvancedRRy.setText("FR");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
    rollingRadiusPanel.add(lbAdvancedRRy, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 2);
    rollingRadiusPanel.add(spAdvancedRRy, gridBagConstraints);

    lbAdvancedRFy.setText("FF");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
    rollingRadiusPanel.add(lbAdvancedRFy, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 2);
    rollingRadiusPanel.add(spAdvancedRFy, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    advancedEditor.add(rollingRadiusPanel, gridBagConstraints);

    lbAngleSteps.setText("FF");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 0, 2);
    advancedEditor.add(lbAngleSteps, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 2);
    advancedEditor.add(spAngleSteps, gridBagConstraints);

    editors.addTab("Advanced", advancedEditor);

    add(editors, java.awt.BorderLayout.CENTER);

    btCalc.setText("Calc");
    controlPanel.add(btCalc);

    btExport.setText("Export");
    controlPanel.add(btExport);

    add(controlPanel, java.awt.BorderLayout.SOUTH);

  }//GEN-END:initComponents
  
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel advancedEditor;
  private javax.swing.JPanel basicEditor;
  private javax.swing.JButton btCalc;
  private javax.swing.JButton btExport;
  private javax.swing.JPanel controlPanel;
  private javax.swing.JTabbedPane editors;
  private javax.swing.JPanel fixedRadiusPanel;
  private javax.swing.JLabel lbAdvancedFFx;
  private javax.swing.JLabel lbAdvancedFFy;
  private javax.swing.JLabel lbAdvancedFRx;
  private javax.swing.JLabel lbAdvancedFRy;
  private javax.swing.JLabel lbAdvancedRFx;
  private javax.swing.JLabel lbAdvancedRFy;
  private javax.swing.JLabel lbAdvancedRRx;
  private javax.swing.JLabel lbAdvancedRRy;
  private javax.swing.JLabel lbAngleSteps;
  private javax.swing.JLabel lbBasicFill;
  private javax.swing.JLabel lbFixedRadius;
  private javax.swing.JLabel lbRatio;
  private javax.swing.JLabel lbRollingRadius;
  private javax.swing.JPanel rollingRadiusPanel;
  private javax.swing.JSpinner spAdvancedFFx;
  private javax.swing.JSpinner spAdvancedFFy;
  private javax.swing.JSpinner spAdvancedFRx;
  private javax.swing.JSpinner spAdvancedFRy;
  private javax.swing.JSpinner spAdvancedRFx;
  private javax.swing.JSpinner spAdvancedRFy;
  private javax.swing.JSpinner spAdvancedRRx;
  private javax.swing.JSpinner spAdvancedRRy;
  private javax.swing.JSpinner spAngleSteps;
  private javax.swing.JSpinner spFixedRadius;
  private javax.swing.JSpinner spRatio;
  private javax.swing.JSpinner spRollingRadius;
  // End of variables declaration//GEN-END:variables
  
  static final int BASIC_EDITOR    = 0;
  static final int ADVANCED_EDITOR = 1;
  Rotor fixedRotor;
  Rotor rollingRotor;
  
  private void complete() {
    btCalc.setText(rsc.getString("btCalc-text"));
    btCalc.setToolTipText(rsc.getString("btCalc-tip"));
    btCalc.setIcon(application.aCalc.getIcon());
    btCalc.addActionListener(this);
    btExport.setText(rsc.getString("btExport-text"));
    btExport.setToolTipText(rsc.getString("btExport-tip"));
    btExport.setIcon(application.aExport.getIcon());
    btExport.addActionListener(this);
    // basic editor
    editors.setTitleAt(BASIC_EDITOR, rsc.getString("basicEditor-title"));
    lbFixedRadius.setText(rsc.getString("lbFixedRadius-text"));
    lbFixedRadius.setToolTipText(rsc.getString("lbFixedRadius-tip"));
    lbRollingRadius.setText(rsc.getString("lbRollingRadius-text"));
    lbRollingRadius.setToolTipText(rsc.getString("lbRollingRadius-tip"));
    lbRatio.setText(rsc.getString("lbRatio-text"));
    lbRatio.setToolTipText(rsc.getString("lbRatio-tip"));
    spFixedRadius.setModel(new javax.swing.SpinnerNumberModel(100.0, 0.0, 100.0, 10.0));
    spRollingRadius.setModel(new javax.swing.SpinnerNumberModel(100.0, 0.0, 100.0, 10.0));
    spRatio.setModel(new javax.swing.SpinnerNumberModel(6.0, 0.0, 256.0, 1.0));
    // advanced editor
    editors.setTitleAt(ADVANCED_EDITOR, rsc.getString("advancedEditor-title"));
    try {
      ((javax.swing.border.TitledBorder)fixedRadiusPanel.getBorder()).setTitle(
        rsc.getString("fixedRadiusPanel-title"));
      ((javax.swing.border.TitledBorder)rollingRadiusPanel.getBorder()).setTitle(
        rsc.getString("rollingRadiusPanel-title"));
    }
    catch (ClassCastException _) {}
    String buf;
    buf = rsc.getString("advanced-rx-text");
    lbAdvancedFRx.setText(buf);
    lbAdvancedRRx.setText(buf);
    buf = rsc.getString("advanced-ry-text");
    lbAdvancedFRy.setText(buf);
    lbAdvancedRRy.setText(buf);
    buf = rsc.getString("advanced-fx-text");
    lbAdvancedFFx.setText(buf);
    lbAdvancedRFx.setText(buf);
    buf = rsc.getString("advanced-fy-text");
    lbAdvancedFFy.setText(buf);
    lbAdvancedRFy.setText(buf);
    lbAngleSteps.setText(rsc.getString("lbAngleSteps-text"));
    lbAngleSteps.setToolTipText(rsc.getString("lbAngleSteps-tip"));
    setupStep(spAdvancedFRx, 10);
    setupStep(spAdvancedFRy, 10);
    setupStep(spAdvancedRRx, 10);
    setupStep(spAdvancedRRy, 10);
    setupStep(spAngleSteps, 60);
  }
  
  public java.awt.Dimension getPreferredSize() {
    java.awt.Dimension dim = super.getPreferredSize();
    dim.width = Math.max(dim.width, 180);
    return dim;
  }
  
  /** Load configuration.
   */ 
  public void fireProjectChange() { 
    if (application.project.getEditorType().equals("advanced")) 
      editors.setSelectedIndex(ADVANCED_EDITOR);
    else
      editors.setSelectedIndex(BASIC_EDITOR);
    findOperators();
    updateBasicEditor();
    updateAdvancedEditor();
  }
  
  private void findOperators() {
    // find first two rotor operators
    int index = 0;
    Operator op;
    while ((op = application.project.getOperator(index++)) != null)
      if (op instanceof Rotor) break;
    fixedRotor = (Rotor) op;
    while ((op = application.project.getOperator(index++)) != null)
      if (op instanceof Rotor) break;
    rollingRotor = (Rotor) op;
  }
  
  private void updateBasicEditor() {
    setValue(spFixedRadius, fixedRotor.getRadiusX());
    setValue(spRollingRadius, rollingRotor.getRadiusX());
    double ratio = (rollingRotor.getFrequencyX()/fixedRotor.getFrequencyX()) - 1;
    setValue(spRatio, ratio);
  }
  
  private void processBasic() {
    application.project.setEditorType("basic");
    fixedRotor.setRadiusX(getDoubleValue(spFixedRadius));
    fixedRotor.setRadiusY(fixedRotor.getRadiusX());
    rollingRotor.setRadiusX(getDoubleValue(spRollingRadius));
    rollingRotor.setRadiusY(rollingRotor.getRadiusX());
    double ratio = getDoubleValue(spRatio);
    rollingRotor.setFrequencyX((ratio+1) * fixedRotor.getFrequencyX());
    rollingRotor.setFrequencyY((ratio+1) * fixedRotor.getFrequencyY());
    application.project.setSteps(Math.abs((int) (60*ratio))); 
  }
  
  private void updateAdvancedEditor() {
    setValue(spAdvancedFRx, fixedRotor.getRadiusX());
    setValue(spAdvancedFRy, fixedRotor.getRadiusY());
    setValue(spAdvancedFFx, fixedRotor.getFrequencyX());
    setValue(spAdvancedFFy, fixedRotor.getFrequencyY());
    setValue(spAdvancedRRx, rollingRotor.getRadiusX());
    setValue(spAdvancedRRy, rollingRotor.getRadiusY());
    setValue(spAdvancedRFx, rollingRotor.getFrequencyX());
    setValue(spAdvancedRFy, rollingRotor.getFrequencyY());
    setValue(spAngleSteps, application.project.getSteps());
  }
  
  private void processAdvanced() {
    application.project.setEditorType("advanced");
    fixedRotor.setRadiusX(getDoubleValue(spAdvancedFRx));
    fixedRotor.setRadiusY(getDoubleValue(spAdvancedFRy));
    fixedRotor.setFrequencyX(getDoubleValue(spAdvancedFFx));
    fixedRotor.setFrequencyY(getDoubleValue(spAdvancedFFy));
    rollingRotor.setRadiusX(getDoubleValue(spAdvancedRRx));
    rollingRotor.setRadiusY(getDoubleValue(spAdvancedRRy));
    rollingRotor.setFrequencyX(getDoubleValue(spAdvancedRFx));
    rollingRotor.setFrequencyY(getDoubleValue(spAdvancedRFy));
    application.project.setSteps(getIntValue(spAngleSteps)); 
  }
  
  
  
  private void setValue(JSpinner spin, double value) {
    spin.setValue(new Double(value));
  }
  
  private double getDoubleValue(JSpinner spin) {
    Object value = spin.getValue();
    if (value instanceof Number)
      return ((Number)value).doubleValue();
    else
      return 0.0;
  }
  
  private int getIntValue(JSpinner spin) {
    Object value = spin.getValue();
    if (value instanceof Number)
      return ((Number)value).intValue();
    else
      return 0;
  }
  
  private void setupStep(JSpinner spin, double step) {
    SpinnerModel model = spin.getModel();
    if (model instanceof SpinnerNumberModel)
      ((SpinnerNumberModel)model).setStepSize(new Double(step));
  }
  
  public void actionPerformed(ActionEvent evt) {
    if (application.project == null)
      return; // trotelfest!
    if (evt.getSource() == btCalc || evt.getSource() == application) {
      application.editPerformed(this);
      switch (editors.getSelectedIndex()) {
        case BASIC_EDITOR:
          processBasic();
          updateAdvancedEditor();
          break;
        case ADVANCED_EDITOR:
          processAdvanced();
          updateBasicEditor();
          break;
        default:
          System.err.println("Warning: unexpected editor!");
          break;
      }
      application.cmCompute();
    }
    else if (evt.getSource() == btExport) { 
      application.cmExport();
    }
  }
  
  
}
