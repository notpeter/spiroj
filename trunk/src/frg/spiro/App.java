/*
 * App.java
 *
 * Created on 30 June 2005, 09:05
 */

package frg.spiro;

import java.awt.event.*;
import java.io.*;
import java.text.MessageFormat;
import javax.swing.*;

import frg.gui.*;
import frg.util.*;
// import frg.xml.*;

/**
 * Main SpiroJ application
 * @author  fgrebenicek
 */
public class App extends javax.swing.JFrame {
  
  CssResourceMan resource;
  CssResourceMan options;
  
  /** Creates new form App */
  public App() {
    CssResourcePane.setInternal(false);
    resource = new CssResourceMan(getClass().getName());
    options = new CssResourceMan();
    initComponents();
    initActions();
    complete();
    setTitlePlus();
    pack();
    java.awt.Dimension screen = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
    java.awt.Rectangle dim = getBounds();
    setBounds((screen.width - dim.width)/2, 0,dim.width,dim.height);
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  private void initComponents() {//GEN-BEGIN:initComponents
    toolBar = new javax.swing.JToolBar();
    editContainer = new javax.swing.JPanel();
    menuBar = new javax.swing.JMenuBar();
    fileMenu = new javax.swing.JMenu();
    editMenu = new javax.swing.JMenu();
    helpMenu = new javax.swing.JMenu();
    aboutMenuItem = new javax.swing.JMenuItem();

    setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
    addWindowListener(new java.awt.event.WindowAdapter() {
      public void windowClosing(java.awt.event.WindowEvent evt) {
        exitForm(evt);
      }
    });

    getContentPane().add(toolBar, java.awt.BorderLayout.NORTH);

    getContentPane().add(editContainer, java.awt.BorderLayout.EAST);

    fileMenu.setText("File");
    menuBar.add(fileMenu);

    editMenu.setText("Edit");
    menuBar.add(editMenu);

    helpMenu.setText("Help");
    aboutMenuItem.setText("About");
    aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        aboutMenuItemActionPerformed(evt);
      }
    });

    helpMenu.add(aboutMenuItem);

    menuBar.add(helpMenu);

    setJMenuBar(menuBar);

    pack();
  }//GEN-END:initComponents

  private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
    // TODO add your handling code here:
    if (canClose()) {
      System.out.println("Bye.");
      SaveOutput.stop();
      System.exit (0);
    }
  }//GEN-LAST:event_exitForm

  private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
    // TODO add your handling code here:
    new About(this).show();
  }//GEN-LAST:event_aboutMenuItemActionPerformed
    
  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    String debug = System.getProperty("debug.log");
    if (debug != null)
      try { SaveOutput.start(debug); }
      catch (IOException ioe) {
        System.err.println("Cannot save debug log: "+ioe.getMessage());
      }
    System.out.println("Starting "+About.getName()+" application...");
    System.out.println("Version: "+About.getVersion());
    long start = new java.util.Date().getTime();
    App app = new App();
    app.show();
    long stop = new java.util.Date().getTime() - start;
    int sec = (int) (stop/1000);
    String mili = StringUtils.fill(Integer.toString((int)(stop%1000)), 3, '0');
    String uff  = (stop > 5000) ? " UFF"+StringUtils.fill("", sec-4, '!') : "";
    System.out.println("...started in "+sec+"."+mili+" [s]."+uff);
    if (args.length > 0)
      app.load(new File(args[0]));
  }
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JMenuItem aboutMenuItem;
  private javax.swing.JPanel editContainer;
  private javax.swing.JMenu editMenu;
  private javax.swing.JMenu fileMenu;
  private javax.swing.JMenu helpMenu;
  private javax.swing.JMenuBar menuBar;
  private javax.swing.JToolBar toolBar;
  // End of variables declaration//GEN-END:variables
  
  protected Project project;
  protected Drawing drawing;
  protected EditPanel editPanel;
  protected boolean documentEdited = false;
  
  private void complete() {  
    // resource.list();
    setTitle(resource.getString("title"));
    setIconImage(resource.getIconImage("icon"));
    ////
    drawing = new Drawing();
    getContentPane().add(drawing, java.awt.BorderLayout.CENTER);
    editPanel = new EditPanel(this);
    editContainer.add(editPanel);
  }
  
  protected void setWaitCursor() {
    getContentPane().setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
  }
  
  protected void setDefaultCursor() {
    getContentPane().setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
  }
  
  public void setTitlePlus() {
    setTitle(formatTitle());
  }
  
  public String formatTitle() {
    String result;
    String patt = resource.getString("title");
    MessageFormat msg = new MessageFormat(patt);
    if (project != null) {
      String[] par = { project.file.getName()};
      result = msg.format(par);
    }
    else {
      String[] par = { resource.getString("no-file") };
      result = msg.format(par);
    }
    if (documentEdited)
      result += "[*]";
    return result;
  }
  
  //////////////////////////////
  // Document listener support
  
  public void editPerformed(Object source) {
    // System.out.println("EditPerformed: "+source);
    documentEdited = true;
    aSaveXml.setEnabled(true);
    setTitlePlus();
  }

  public void savePerformed(Object source) {
    documentEdited = false;
    aSaveXml.setEnabled(false);
    setTitlePlus();
  }  
  
  public void loadPerformed(Object source) {
    documentEdited = false;
    aSaveXml.setEnabled(false);
    aSaveXmlAs.setEnabled(true);
    setTitlePlus();
    drawing.setConfig(project.getShapeConfig());
    editPanel.fireProjectChange();
    lineProperties.fireProjectChange();
    cmCompute();
  }
  
  public void closePerformed(Object source) {
    aSaveXml.setEnabled(false);
    aSaveXmlAs.setEnabled(false);
  }
  
  protected boolean canClose() {
    boolean close = true;
    if (project != null && documentEdited) {
      String onOpt = "yes true on 1";
      String opt = options.getString("options.unsaved-warn");
      if (onOpt.indexOf(opt) >= 0) { // show confirmation dialog
        Object[] par = { project.file.getName() };
        int response = 
          CssResourcePane.showYesNoCancel(this, "SaveConfirm", par);
        switch (response) {
          case CssResourcePane.YES_OPTION:
            aSaveXml.actionPerformed(null);
            close = true;
            break;
          case CssResourcePane.NO_OPTION:
            close = true;
            break;
          default:
            close = false;
            break;
        }
      }
    }
    if (close && documentEdited) {
      System.out.println("Warning: unsaved changes discarded!");
    }
    return close;
  }
  
  /**
   * Preferred way to load a file
   * @param file XML design file to load
   */
  public void load(File file) {
    setWaitCursor();
    closePerformed(this);
    project = null;
    setTitlePlus();
    project = new Project(file);
    try {
      System.out.println("Parsing: "+file);
      project.load();
      loadPerformed(this);
      System.out.println("OK.");
    }
    catch (IOException e) {
      Object [] par = { e.toString() };
      setDefaultCursor();
      CssResourcePane.showError(this, "IOException", par);
    }
    setDefaultCursor();
  }
  
  File xmlNewFile = new File("new.xml"); 
  
  public void cmNew() {
    setWaitCursor();
    closePerformed(this);
    String res = options.getString("options.new-pattern");
    /*
    File xmlFile = new File("new.xml");
    if (xmlFile.exists()) {
      try {
        xmlFile = File.createTempFile("new", ".xml", xmlFile.getParentFile());
      } 
      catch (IOException e) {
        Object [] par = { e.toString() };
        setDefaultCursor();
        CssResourcePane.showError(this, "IOException", par);
      }
    }
     */
    project = null;
    setTitlePlus();
    project = new Project(xmlNewFile);
    try {
      System.out.println("New design from pattern: "+res);
      project.loadResource(res);
      loadPerformed(this);
      System.out.println("OK.");
    }
    catch (IOException e) {
      Object [] par = { e.toString() };
      setDefaultCursor();
      CssResourcePane.showError(this, "IOException", par);
    }
    setDefaultCursor();
  }
  
  protected void saveXml(File outFile) {
    try {
      project.saveAs(outFile);
      savePerformed(this);
    } catch (IOException e) {
      Object [] par = { e.toString() };
      CssResourcePane.showError(this, "IOException", par);
    }
  }
  
  protected void saveXml() {
    try {
      project.save();
      savePerformed(this);
    } catch (IOException e) {
      Object [] par = { e.toString() };
      CssResourcePane.showError(this, "IOException", par);
    }
  }
  
  public void cmCompute() {
    if (project != null)
      drawing.setShape(project.generatePath());
  }
  
  public void cmExport() {
    aExport.actionPerformed(null);
  }

  ////////////////////////////////////////////////////////////////////////////
  // actions
  
  CssResourceAction aNewXml;
  CssResourceAction aOpenXml;
  CssResourceAction aSaveXml;
  CssResourceAction aSaveXmlAs;
  CssResourceAction aExport;
  CssResourceAction aCalc;
  CssResourceAction aExit;
  LineProperties lineProperties;
  
  private void initActions() {
    aNewXml    = new ActionNewXml();
    aOpenXml   = new ActionOpenXml();
    aSaveXml   = new ActionSaveXml(); 
    aSaveXmlAs = new ActionSaveXmlAs();
    aExport    = new ActionExport();
    aCalc      = new ActionCalc();
    aExit      = new ActionExit();
    aSaveXml.setEnabled(false);
    aSaveXmlAs.setEnabled(false);
    lineProperties = new LineProperties(this);
    ////
    fileMenu.setText(resource.getString("fileMenu-text"));
    fileMenu.setMnemonic(resource.getString("fileMenu-mnemonic").charAt(0));
    fileMenu.add(makeMenuItem(aNewXml));
    fileMenu.add(makeMenuItem(aOpenXml));
    fileMenu.add(makeMenuItem(aSaveXml));
    fileMenu.add(makeMenuItem(aSaveXmlAs));
    fileMenu.add(makeMenuItem(aExport));
    fileMenu.addSeparator();
    fileMenu.add(makeMenuItem(aExit));
    ////
    editMenu.setText(resource.getString("editMenu-text"));
    editMenu.setMnemonic(resource.getString("editMenu-mnemonic").charAt(0));
    editMenu.add(makeMenuItem(aExport));
    editMenu.add(makeMenuItem(aCalc));
    ////
    toolBar.add(aNewXml);
    toolBar.add(aOpenXml);
    toolBar.add(aSaveXml);
    toolBar.addSeparator();
    // line properties
    toolBar.add(lineProperties);
  }

  private JMenuItem makeMenuItem(CssResourceAction a) {
    JMenuItem item = new JMenuItem(a);
    item.setIcon(null);
    item.setAccelerator(a.getAccelerator());
    return item;
  }
  
  private void setupButton(JButton button, CssResourceAction a) {
    button.setAction(a);
    button.setText(null);
  }
  
  public class ActionExit extends CssResourceAction {
    public void actionPerformed(ActionEvent evt) {
      exitForm(null);
    }
  }
  
  public class ActionNewXml extends CssResourceAction {
    public void actionPerformed(ActionEvent evt) {
      if (canClose()) {
        cmNew();
        //System.out.println("New");
      }
    }
  }
    
  public class ActionOpenXml extends CssResourceAction {
    JFileChooser chooser;
    public void actionPerformed(ActionEvent evt) {
      if (canClose()) {
        if (chooser == null) {
          if (project != null)
            chooser = new JFileChooser(project.file);
          else
            chooser = new JFileChooser(new File("."));
          ExtensionFileFilter filter = new ExtensionFileFilter(
            options.getString("design.open.extension"),
            options.getString("design.open.description"));
          chooser.addChoosableFileFilter(filter);
          String approve = options.getString("design.open.approve");
          chooser.setApproveButtonText(approve);
          chooser.setApproveButtonMnemonic(approve.charAt(0));
        }
        int returnVal = chooser.showOpenDialog(App.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
          load(chooser.getSelectedFile());
        }
        //System.out.println("Open");
      }
    }
  }
  
  public class ActionSaveXml extends CssResourceAction {
    public void actionPerformed(ActionEvent evt) {
      if (project != null) {
        if (project.file.equals(xmlNewFile))
          aSaveXmlAs.actionPerformed(evt);
        else
          saveXml();
      }
    }
  }
  
  public class ActionSaveXmlAs extends CssResourceAction {
    JFileChooser chooser;
    public void actionPerformed(ActionEvent evt) {
      if (project != null) {
        if (chooser == null) { // create new chooser
          chooser = new JFileChooser(project.file);
          ExtensionFileFilter filter = new ExtensionFileFilter(
            options.getString("design.open.extension"),
            options.getString("design.open.description"));
          chooser.addChoosableFileFilter(filter);
        }
        int returnVal = chooser.showDialog(App.this, 
          options.getString("design.saveAs.approve"));
        if (returnVal == JFileChooser.APPROVE_OPTION) {
          File xmlFile = chooser.getSelectedFile();
          saveXml(xmlFile);
          setTitlePlus();
        }
      }  
    }
  }
 
  public class ActionExport extends CssResourceAction {
    JFileChooser chooser;
    public void actionPerformed(ActionEvent evt) {
      if (project != null) {
        if (chooser == null) { // create new chooser
          chooser = new JFileChooser(project.file.getParentFile());
          chooser.setAcceptAllFileFilterUsed(false);
          // chooser.addChoosableFileFilter(filter);
          chooser.addChoosableFileFilter(new ExportAI());
          chooser.addChoosableFileFilter(new ExportEPS());
          chooser.addChoosableFileFilter(new ExportSVG());
        }
        int returnVal = chooser.showSaveDialog(App.this); 
        if (returnVal == JFileChooser.APPROVE_OPTION) {
          File outFile = chooser.getSelectedFile();
          javax.swing.filechooser.FileFilter filter = chooser.getFileFilter();
          if (filter instanceof Exporter) {
            Exporter exFilter = (Exporter) filter;
            if (!outFile.getName().endsWith(exFilter.getExtension()))
              outFile = new File(outFile.getAbsoluteFile().getParent(), 
                outFile.getName()+exFilter.getExtension());
            try {
              exFilter.export(drawing, outFile);
            }
            catch (IOException ioe) {
              Object [] par = { ioe.toString() };
              CssResourcePane.showError(App.this, "IOException", par);
            }
          }
        }
      }
    }
  }
  
  public class ActionCalc extends CssResourceAction {
    public void actionPerformed(ActionEvent evt) {
      if (project != null) {
        // cmCompute();
        editPanel.actionPerformed(new ActionEvent(App.this, ActionEvent.ACTION_PERFORMED, ""));
      }
    }
  }
 
}
